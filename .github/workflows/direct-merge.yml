name: Auto-merge branches into main
on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
  schedule:
    - cron: '*/30 * * * *'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: direct-merge-main
  cancel-in-progress: false

jobs:
  merge:
    name: Scan and merge all branches into main (conflict-safe)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch all
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/* --prune

      - name: Find candidate branches
        id: branches
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin +refs/heads/*:refs/remotes/origin/* --prune
          mapfile -t BRANCHES < <(git for-each-ref --format='%(refname:short)' refs/remotes/origin | grep -v '^origin/HEAD$' | grep -v '^origin/main$')
          printf "Found %d branches to evaluate\n" "${#BRANCHES[@]}"
          # Emit as newline-separated for matrix-like consumption
          {
            for b in "${BRANCHES[@]}"; do echo "$b"; done
          } > branches.txt
          echo "count=${#BRANCHES[@]}" >> $GITHUB_OUTPUT

      - name: Merge all clean branches into main
        if: steps.branches.outputs.count != '0'
        shell: bash
        run: |
          set -euo pipefail
          cat branches.txt | while read -r remote_branch; do
            [ -z "$remote_branch" ] && continue
            branch_name=${remote_branch#origin/}
            if [ "$branch_name" = "main" ]; then
              continue
            fi
            echo "\n=== Evaluating $branch_name ==="

            # Always start from latest remote main
            git fetch origin main
            git checkout -B _merge_check_tmp origin/main

            if ! git merge --no-commit --no-ff "origin/$branch_name"; then
              echo "Conflict detected: $branch_name -> main. Skipping."
              git merge --abort || true
              continue
            fi

            git merge --abort || true

            # Perform the actual merge onto local main and push
            git checkout -B main origin/main
            git merge --no-ff "origin/$branch_name" -m "Auto-merged branch $branch_name into main"
            git push origin main
            echo "Merged $branch_name into main"
          done

      - name: Done
        run: echo "Auto-merge run complete"


